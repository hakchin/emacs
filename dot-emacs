;; -*- Mode: emacs-lisp; -*-
;; Emacs configuration
;;
;; (c) July 2011 - Manuel Odendahl - wesen@ruinwesen.com
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; General setup
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar HOME (expand-file-name "~"))
(setq home-dir HOME)
(setq user-mail-address "wesen@ruinwesen.com")

(defvar emacs-dir (file-name-directory (file-truename "~/.emacs")))

(add-to-list 'load-path emacs-dir)

(setq split-window-preferred-function 'split-window-sensibly)
(setq split-width-threshold nil)

;; (setq server-use-tcp t)
;; (server-start)

;; paths

(defun add-emacs-dirs (&rest paths)
  (dolist (path paths)
    (add-to-list 'load-path (concat emacs-dir path "/"))))

(add-emacs-dirs
 "packages"
 "Slime"
 "mo-git-blame"
 "auto-complete"
 "auto-complete-clang"
 "cucumber.el"
 "geben"
 ; "emacs-w3m"
 "clojure-mode"
 "gist.el"
 "tumble"
 "lua-mode")

(require 'lua-mode)

;; load elpa
(require 'package)
(setq package-user-dir (concat emacs-dir "packages/"))
(package-initialize)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))

;; load modes
;; (require 'ruby-mode)
;; (require 'prefer-utf)

(unless (boundp 'aquamacs-version)
  (require 'mouse)
  (xterm-mouse-mode t)
  (defun track-mouse (e))
  (setq mouse-sel-mode t)

  ;; terminal smooth scrolling
  (defun smooth-scroll (increment)
    (scroll-up increment)
    (sit-for 0.05)
    (scroll-up increment)
    (sit-for 0.02)
    (scroll-up increment)
    (sit-for 0.02)
    (scroll-up increment)
    (sit-for 0.05)
    (scroll-up increment)
    (sit-for 0.06)
    (scroll-up increment))

  (global-set-key [(mouse-5)] '(lambda () (interactive) (smooth-scroll 1)))
  (global-set-key [(mouse-4)] '(lambda () (interactive) (smooth-scroll -1)))

  (defun my-terminal-config (&optional frame)
    (if (not frame)
        (xterm-mouse-mode 1)
      (if xterm-mouse-mode
          (xterm-mouse-mode 1))))

  (add-hook 'after-make-frame-functions 'my-terminal-config)
  )


;; key bindings for sexp navigation

(setq font-lock-verbose nil)



(global-set-key "\M-a" 'backward-sexp)
(global-set-key "\M-e" 'forward-sexp)
(global-set-key (kbd "ESC <up>") 'backward-up-list)
(global-set-key (kbd "ESC <down>") 'down-list)
(global-set-key (kbd "M-SPC") 'mark-sexp)


(when (boundp 'aquamacs-version)
  (setq mac-allow-anti-aliasing nil)
  (set-default-font "-apple-Andale_Mono-medium-normal-normal-*-9-*-*-*-m-0-iso10646-1"))

;;(set-default-font "-apple-Menlo-medium-normal-normal-*-8-*-*-*-m-9-iso10646-1")
;; (set-default-font "-apple-anonymous-medium-r-normal--8-0-72-72-m-0-iso10646-1")


(add-emacs-dirs "solarized")
(require 'color-theme)
(color-theme-initialize)
(require 'color-theme-solarized)
(color-theme-dark-laptop)
(global-font-lock-mode t)

(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'tabbar-mode)
  (tabbar-mode -1))
(show-paren-mode 1)
(transient-mark-mode t)

;; automatic indent on return
(define-key global-map [(control m)] 'newline-and-indent)
; (define-key ruby-mode-map [(control m)] 'newline-and-indent)
(require 'asm-mode)
(define-key asm-mode-map [(control m)] 'newline-and-indent)
;; (global-set-key [(meta g)] 'goto-line)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Emacs lisp mode configuration
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

(defun rgr/toggle-context-help ()
  "Turn on or off the context help.
Note that if ON and you hide the help buffer then you need to
manually reshow it. A double toggle will make it reappear"
  (interactive)
  (with-current-buffer (help-buffer)
    (unless (local-variable-p 'context-help)
      (set (make-local-variable 'context-help) t))
    (if (setq context-help (not context-help))
        (progn
          (if (not (get-buffer-window (help-buffer)))
              (display-buffer (help-buffer)))))
    (message "Context help %s" (if context-help "ON" "OFF"))))

(defun rgr/context-help ()
  "Display function or variable at point in *Help* buffer if visible.
Default behaviour can be turned off by setting the buffer local
context-help to false"
  (interactive)
  (let ((rgr-symbol (symbol-at-point))) ; symbol-at-point http://www.emacswiki.org/cgi-bin/wiki/thingatpt%2B.el
    (with-current-buffer (help-buffer)
      (unless (local-variable-p 'context-help)
        (set (make-local-variable 'context-help) t))
      (when (and context-help (get-buffer-window (help-buffer))
                 rgr-symbol)
        (progn
          (if (fboundp  rgr-symbol)
              (describe-function rgr-symbol)
            (if (boundp  rgr-symbol)
                (describe-variable rgr-symbol))))))))

(defadvice eldoc-print-current-symbol-info
  (around eldoc-show-c-tag activate)
  (cond
   ((eq major-mode 'emacs-lisp-mode) (rgr/context-help) ad-do-it)
   ((eq major-mode 'lisp-interaction-mode) (rgr/context-help) ad-do-it)
   ((eq major-mode 'apropos-mode) (rgr/context-help) ad-do-it)
   (t ad-do-it)))

(global-set-key (kbd "C-c h") 'rgr/toggle-context-help)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Mode list
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; mode list stuff
(setq auto-mode-alist
      (append '(
                ("\\.emacs$" . emacs-lisp-mode)
                ("\\.ino$" . c++-mode)
                ("\\.cu$" . c++-mode)
                ("\\.cl$" . c++-mode)
                ("\\.sh$" . shell-script-mode)
                ("\\.pde$" . java-mode)
                ("Capfile" . ruby-mode)
                ("\\.asd$" . lisp-mode)
                ("\\.lisp$" . lisp-mode)
                ("\\.lsp$" . lisp-mode)
                ("\\.cl$" . lisp-mode)
                ("\\.system$" . lisp-mode)
                ("\\.js" . js2-mode)
                ("\\.html" . html-mode)
                ("\\.bknr$" . nxml-mode)
                ("\\.mustache" . html-mode)
                ("\\.php" . php-mode)
                ("\\.sql" . sql-mode)
                ("\\.less" . css-mode)
                ("\\.s" . asm-mode)
                ("\\.S" . asm-mode)
                ("\\.clj" . clojure-mode)
                ) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; js2-mode configuration
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-emacs-dirs "js2-mode")
(require 'js2-mode)
(define-key js2-mode-map [(control m)] 'newline-and-indent)
(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)


      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(require 'moz)
(autoload 'moz-minor-mode "moz" "Mozilla Minor and Inferior Mozilla Modes" t)

(defun my-js-mode-hook ()
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  ;;  (c-toggle-auto-state 0)
  (local-set-key (kbd "\C-c h") 'jquery-doc)
  (c-toggle-hungry-state 1)
  (moz-minor-mode 1)
  (define-key js-mode-map [(return)] 'newline-and-indent)
  (define-key js-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js-mode-map [(control meta q)] 'my-indent-sexp)
  )
(add-hook 'js-mode-hook 'my-js-mode-hook)

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
;;  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (local-set-key (kbd "\C-c h") 'jquery-doc)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)]
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
      (js2-highlight-vars-mode))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

(autoload 'espresso-mode "espresso")
(require 'espresso)
(require 'js2-mode)
(require 'js2-highlight-vars)

;; make json work
(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))

(defadvice js2-reparse (before json)
  (setq js2-buffer-file-name buffer-file-name))
(ad-activate 'js2-reparse)

(defadvice js2-parse-statement (around json)
  (if (and (= tt js2-LC)
           js2-buffer-file-name
           (string-equal (substring js2-buffer-file-name -5) ".json")
           (eq (+ (save-excursion
                    (goto-char (point-min))
                    (back-to-indentation)
                    (while (eolp)
                      (next-line)
                      (back-to-indentation))
                    (point)) 1) js2-ts-cursor))
      (setq ad-return-value (js2-parse-assign-expr))
    ad-do-it))
(ad-activate 'js2-parse-statement)(defadvice js2-reparse (before json)
                                    (setq js2-buffer-file-name buffer-file-name))
(ad-activate 'js2-reparse)

(defadvice js2-parse-statement (around json)
  (if (and (= tt js2-LC)
           js2-buffer-file-name
           (string-equal (substring js2-buffer-file-name -5) ".json")
           (eq (+ (save-excursion
                    (goto-char (point-min))
                    (back-to-indentation)
                    (while (eolp)
                      (next-line)
                      (back-to-indentation))
                    (point)) 1) js2-ts-cursor))
      (setq ad-return-value (js2-parse-assign-expr))
    ad-do-it))
(ad-activate 'js2-parse-statement)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Slime setup
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'slime-repl-mode-hook
          (defun clojure-mode-slime-font-lock ()
            (slime-setup '(slime-fancy slime-tramp))
            (let (font-lock-mode)
              (clojure-mode-font-lock-setup))))

(defun load-slime ()
  (require 'slime-autoloads)
  (require 'slime)
  (slime-setup '(slime-fancy slime-tramp slime-autodoc))0;95;c
  
  (add-hook 'lisp-mode-hook (lambda ()
                              (slime-mode t)
                              (setq lisp-indent-function 'common-lisp-indent-function)
                              ))
  (global-set-key [(control t)] (quote slime-selector))
  
  (setq slime-lisp-implementations
        '(
          ;;        (ccl-qh ("ccl-qh"))
          (ccl64 ("ccl64"))
          (clojure ("/usr/local/bin/clj"))
          )))
  
(load-slime)
(add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
;; (setq inferior-lisp-program "ccl-qh")
(define-key lisp-mode-map [(control m)] 'newline-and-indent)
;; (define-key js2-mode-map [(control m)] 'newline-and-indent)

;; add hyperspec lookup

(require 'info-look)

;; info-lookup-symbol in lisp: C-h S

(info-lookup-add-help
 :mode 'lisp-mode
 :regexp "[^][()'\" \t\n]+"
 :ignore-case t
 :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

(define-key global-map (kbd "C-h C-i") 'info-lookup-symbol)

(defun slime-quit-other-buffer ()
  (interactive)
  (other-window 1)
  (slime-popup-buffer-quit))

(define-key slime-mode-map (kbd "C-c q") 'slime-quit-other-buffer)
(define-key slime-repl-mode-map (kbd "C-c q") 'slime-quit-other-buffer)

;; javascript swank-js hook
;; (add-hook 'js2-mode-hook
;;          (lambda ()
;;            (slime-js-minor-mode 1)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; C indent config
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq c-basic-offset 2)
(setq-default c-basic-offset 2)
(setq c-indent-level 2)
(setq tab-width 2)

(setq indent-tabs-mode t)
(setq-default indent-tabs-mode nil)
(global-auto-revert-mode 1)

(defun linux-c-mode ()
  "C mode with adjusted defaults for use with the Linux
kernel."
  (interactive)
  (c-mode)
  (setq c-indent-level 8)
  (setq c-brace-imaginary-offset 0)
  (setq c-brace-offset -8)
  (setq c-argdecl-indent 8)
  (setq c-label-offset -8)
  (setq c-continued-statement-offset 8)
  (setq indent-tabs-mode nil)
  (setq tab-width 8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Misc modes
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ack searching
(autoload 'ack-same "full-ack" nil t)
(autoload 'ack "full-ack" nil t)
(autoload 'ack-find-same-file "full-ack" nil t)
(autoload 'ack-find-file "full-ack" nil t)

(define-coding-system-alias 'utf8 'utf-8)

(add-emacs-dirs "zencoding")
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode)

(require 'inf-ruby)

(autoload 'mo-git-blame-file "mo-git-blame" nil t)
(autoload 'mo-git-blame-current "mo-git-blame" nil t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Autocomplete setup
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")

(require 'yasnippet-bundle)

(require 'auto-complete-clang)

(setq ac-auto-start nil)
(setq ac-quick-help-delay 0.1)
(define-key ac-mode-map (kbd "C-c TAB") 'auto-complete)

(defvar ac-cursor-color "blanched almond"
  "Old cursor color.")

(defun my-ac-config ()
  (setq ac-clang-flags (split-string "-I/usr/include/c++/4.2.1 -I/usr/include -I/usr/local/include"))
  (setq ac-clang-executable "/usr/local/bin/clang")
  (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
  (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
  (add-hook 'c++-mode-common-hook 'ac-cc-mode-setup)
  (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
  (add-hook 'css-mode-hook 'ac-css-mode-setup)
  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
  (global-auto-complete-mode t))
(defun my-ac-cc-mode-setup ()
  (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
(add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
(add-hook 'c++-mode-common-hook 'my-ac-cc-mode-setup)
(my-ac-config)

(setq yas/root-directory (concat emacs-dir "snippets/"))

;; ess
(add-emacs-dirs "ess/lisp")
(require 'ess-site)


(defun my-ac-ess-config ()
  (setq ac-sources
        '(ac-source-R-objects ac-source-R-args ac-source-R  ac-source-filename ac-source-words-in-buffer)))

(add-hook 'ess-mode-hook 'my-ac-ess-config)
(add-hook 'ess-post-run-hook 'my-ac-ess-config)

;; Load the snippets
(yas/load-directory yas/root-directory)

(require 'xcscope)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Further configuration
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer)
              (remove-if-not 'buffer-file-name (buffer-list)))))


(setq feature-default-i18n-file "/path/to/gherkin/gem/i18n.yml")
;; and load feature-mode
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))

(autoload 'geben "geben" "PHP Debugger on Emacs" t)

(require 'el-navigation)

; (require 'w3m-load)
; (setq w3m-pop-up-frames t)

(add-hook 'c++-mode-hook
          (lambda
            (c-set-offset 'arglist-intro '+)
            (c-set-offset 'inher-intro '++)
            ))

(require 'php-mode)
(require 'php-doc)
(add-hook 'php-mode-hook
          (lambda ()
            ;; (local-set-key "\t" 'php-doc-complete-function)
            (local-set-key (kbd "\C-c h") 'php-doc)
            (c-set-offset 'arglist-intro '+)
            (c-set-offset 'label 2)
            (c-set-offset 'case-label 2)
            (set (make-local-variable 'eldoc-documentation-function)
                 'php-doc-eldoc-function)
            (eldoc-mode 1)))		


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; misc stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'hide-region)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; flymake
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(add-emacs-dirs "emacs-flymake" "emacs-flymake-phpcs")

;(require 'flymake)
;(setq flymake-no-changes-timeout 5)
;(setq temporary-file-directory "~/.emacs.d/tmp/")
;(setq flymake-run-in-place nil)

;; (setq flymake-phpcs-standard "/usr/share/pear/share/pear/PHP/CodeSniffer/Standards/Squiz/")
;(setq flymake-phpcs-standard "/Users/manuel/code/wesen/wesen-misc/PHPStandards/Wesen/ruleset.xml")
;(setq flymake-phpcs-command (concat emacs-dir "emacs-flymake-phpcs/bin/flymake_phpcs"))
;(require 'flymake-phpcs)

;(global-set-key (kbd "\C-c e") 'flymake-display-err-menu-for-current-line)
;(global-set-key (kbd "\C-c n") (lambda ()
  ;                               (interactive)
 ;                                (flymake-goto-next-error)
   ;                              (flymake-display-err-menu-for-current-line)))
;(global-set-key (kbd "\C-c p") (lambda ()
 ;                                (interactive)
  ;                               (flymake-goto-prev-error)
   ;                              (flymake-display-err-menu-for-current-line)))

(add-emacs-dirs "lintnode")
;(require 'flymake-jslint)
;(setq lintnode-jslint-excludes (list 'onevar 'white 'nomen 'strict))
;(setq lintnode-location (concat emacs-dir "lintnode"))
;(setq lintnode-node-program "node")
;(add-hook 'js-mode-hook
          ;(lambda () (lintnode-hook)))
;(add-hook 'js2-mode-hook
          ;(lambda () (lintnode-hook)))
;
(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(global-set-key (kbd "C-M-]") 'indent-buffer)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; linum
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'find-file-hook (lambda () (when (buffer-file-name) (linum-mode 1))))
;; (global-linum-mode t)
;; (global-linum-mode nil)
(setq linum-format "%d  ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Clojure
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'clojure-mode)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; DVC
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (load (concat emacs-dir "dvc/dvc-load.el"))
;; (require 'dvc-autoloads)

;; (custom-set-variables
;;   ;; custom-set-variables was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  '(egg-enable-tooltip t)
;;  '(safe-local-variable-values (quote ((c-file-offsets (substatement-open . 0) (arglist-intro . +) (arglist-close . +)) (ruby-compilation-executable . "ruby") (ruby-compilation-executable . "ruby1.8") (ruby-compilation-executable . "ruby1.9") (ruby-compilation-executable . "rbx") (ruby-compilation-executable . "jruby")))))
;; (custom-set-faces
;;   ;; custom-set-faces was added by Custom.
;;   ;; If you edit it by hand, you could mess it up, so be careful.
;;   ;; Your init file should contain only one such instance.
;;   ;; If there is more than one, they won't work right.
;;  )
;; ;; Local Variables:
;; ;; mode: emacs-lisp
;; ;; End:


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; markdown mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-emacs-dirs "markdown-mode")

(require 'markdown-mode)

(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

(define-key key-translation-map (kbd "M-[ C") (kbd "C-<right>"))
(define-key key-translation-map (kbd "M-[ d") (kbd "C-<left>"))


(defun file-basename (filename)
  (replace-regexp-in-string "^\\(.*\/\\)?\\([^/\.]*\\)\\(\.[^\.]*\\)?$" "\\2" filename))

(defun downcase-first (string)
  (store-substring string 0 (downcase (substring string 0 1))))

;;; automatic revert (git!!)
(global-auto-revert-mode 1)

(add-emacs-dirs "jquery-doc")
(require 'jquery-doc)
(add-hook 'js-mode-hook 'jquery-doc-setup)
(add-hook 'js2-mode-hook 'jquery-doc-setup)

(require 'pbcopy)
(turn-on-pbcopy)

(setq make-backup-files nil)
(put 'downcase-region 'disabled nil)

;; gist.el
(require 'gist)
(setq gist-view-gist t)

(require 'tumble)

(load "/Users/manuel/.private.el")

(require 'align)
(add-to-list 'align-rules-list
  '(php-array
     (regexp . "\\(\\s-*\\)=>")
     (group . 1)
     (modes . (list 'php-mode))
     (repeat . nil)))

;; (add-to-list 'align-rules-list
;;   '(assignments
;;      (regexp . "\\(\\s-*\\)=[^>]")
;;      (group . 1)
;;      (modes . (list 'php-mode 'c-mode 'js-mode 'js2-mode))
;;      (repeat . nil)))

(add-to-list 'align-rules-list
  '(assignments
     (regexp . "\\(\\s-*\\):\\(\\s-+\\)")
     (group . 2)
     (modes . (list 'js-mode 'js2-mode))
     (repeat . nil)))

(add-to-list 'align-rules-list
  '(assignments
     (regexp . ")\\(\\s-*\\)\\.")
     (group . 1)
     (modes . (list 'js-mode 'js2-mode))
     (spacing . 0)
     (repeat . nil)))

(add-to-list 'align-rules-list
  '(assignments
     (regexp . ",\\(\\s-*\\)")
     (group . 1)
     (modes . (list 'js-mode 'js2-mode 'c-mode 'c++-mode 'php-mode))
     (spacing . 1)
     (repeat . nil)))

(setq align-rules-list (remove-if (lambda (x) (eq (car x) 'c++-comment)) align-rules-list))

;; align c-comments in c-mode
(add-to-list 'align-rules-list
             `(c-comment
               (regexp . ,(concat "\\(\\s-*\\)" (regexp-quote "/* ")))
               (modes . (list 'c-mode 'c++-mode))))

;; align c-comments in asm-mode
(add-to-list 'align-rules-list
             `(asm-comment
               (regexp . ,(concat "\\(\\s-*\\)" (regexp-quote "/* ")))
               (modes . (list 'asm-mode))))

(add-to-list 'align-open-comment-modes 'asm-mode)

(add-to-list 'align-rules-list
  '(assignments
     (regexp . "\\(\\s-*\\)//")
     (group . 1)
     (modes . (list 'js-mode 'js2-mode 'c-mode 'c++-mode 'php-mode))
     (spacing . 1)
     (repeat . nil)))

(define-key global-map (kbd "M-'") 'align)
(define-key global-map (kbd "M-C-_") 'fixup-whitespace)

(setq whitespace-style '(face tabs trailing space-before-tab
                              empty space-after-tab tab-mark))
;; (global-whitespace-mode t)

(require 'ethan-wspace)
(global-ethan-wspace-mode 1)

(defun my-makefile-hook ()
  (message "makefile hook")
  (setq ethan-wspace-mode nil)
  (ethan-wspace-mode 0)
  (ethan-wspace-clean-tabs-mode 0)
  (ethan-wspace-highlight-tabs-mode 0)
  (message "ethan wspace mode %s" ethan-wspace-mode))
(add-hook 'makefile-mode-hook 'my-makefile-hook)

(add-hook 'makefile-bsdmake-mode-hook 'my-makefile-hook)

;; (require 'flymake-jslint)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Org mode
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq org-agenda-files (list "~/code/wesen/org/hihello.org"
                             "~/code/wesen/org/ruinwesen.org"
                             "~/code/wesen/org/todo.org"))

;; (org-babel-do-load-languages
;; 'org-babel-load-languuages
;; '((sh . true) (python . true)))

(setq shift-select-mode nil)

(setq org-modules
      '(org-timer org-mac-message))
(require 'org-mac-message)
(setq org-mac-mail-account "wesen@ruinwesen.com")

;(org-babel-do-load-languages
; 'org-babel-load-languages
;'((sh . true) (python . true)
;   (js . true) ))

(global-set-key "\C-ca" 'org-agenda)
(add-hook 'remember-mode-hook 'org-remember-apply-template)
(define-key global-map [(control meta ?r)] 'remember)
(setq org-src-fontify-natively t)
;(setq org-confirm-babel-evaluate nil)
(add-hook 'org-mode-hook
          (lambda ()
            (org-set-local 'yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
  (defun yas/org-very-safe-expand ()
                     (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
    (add-hook 'org-mode-hook
                    (lambda ()
                        (make-variable-buffer-local 'yas/trigger-key)
                        (setq yas/trigger-key [tab])
                        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                        (define-key yas/keymap [tab] 'yas/next-field)))
(add-hook 'org-mode-hook '(lambda () (yas/minor-mode t)
                            (message "minor-mode")))

(eval-after-load "org"
  '(progn
     (define-prefix-command 'org-todo-state-map)

     (define-key org-mode-map "\C-cx" 'org-todo-state-map)

     (define-key org-todo-state-map "x"
       #'(lambda nil (interactive) (org-todo "CANCELLED")))
     (define-key org-todo-state-map "d"
       #'(lambda nil (interactive) (org-todo "DONE")))
     (define-key org-todo-state-map "f"
       #'(lambda nil (interactive) (org-todo "DEFERRED")))
     (define-key org-todo-state-map "l"
       #'(lambda nil (interactive) (org-todo "DELEGATED")))
     (define-key org-todo-state-map "s"
       #'(lambda nil (interactive) (org-todo "STARTED")))
     (define-key org-todo-state-map "w"
       #'(lambda nil (interactive) (org-todo "WAITING")))))

;(require 'flymake-jslint)
;(require 'ethan-wspace)
;(global-ethan-wspace-mode 1)

;; benjamin ferrari
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))

(add-emacs-dirs "magit")
(require 'magit)
(require 'rebase-mode)

(require 'htmlize)
(add-emacs-dirs "scpaste2")
(require 'scpaste)

(setq scpaste-http-destination "http://bl0rg.net/~manuel/p"
      scpaste-scp-destination "bl0rg.net:public_html/p")

(defadvice terminal-init-xterm  (after select-shift-up activate)
  (define-key input-decode-map "\e[1;2A" [S-up])
  (define-key input-decode-map "\e[1;2B" [S-down])
  (define-key input-decode-map "\e[1;2C" [S-right])
  (define-key input-decode-map "\e[1;2D" [S-left])
  (define-key input-decode-map "\e[1;3A" [M-up])
  (define-key input-decode-map "\e[1;3B" [M-down])
  (define-key input-decode-map "\e[1;3C" [M-right])
  (define-key input-decode-map "\e[1;3D" [M-left])
  (define-key input-decode-map "\e[1;5A" [C-up])
  (define-key input-decode-map "\e[1;5B" [C-down])
  (define-key input-decode-map "\e[1;5C" [C-right])
  (define-key input-decode-map "\e[1;5D" [C-left]))

(add-emacs-dirs "org-confluence" "confluence-el")
(require 'org-confluence)
(require 'confluence)

(autoload 'confluence-get-page "confluence" nil t)

(require 'longlines)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; custom variables
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files nil)
 '(confluence-url "https://confluence.solute.ka/rpc/xmlrpc")
 '(confluence-default-space-alist (list (cons confluence-url "display/IR")))
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(require 'go-mode-load)
(require 'go-autocomplete)
(require 'auto-complete-config)

(setq ac-expand-on-auto-complete nil
      ac-use-quick-help t
      ac-use-fuzzy nil
      ac-menu-height 20)
(define-key ac-mode-map (kbd "C-c TAB") 'auto-complete)
(define-key ac-mode-map (kbd "C-c H") 'ac-last-persist-help)
(define-key ac-mode-map (kbd "C-c h") 'ac-help)

(add-hook 'go-mode-hook '(lambda()
                           (setq ethan-wspace-mode nil)
                           (setq ethan-wspace-highlight-tabs-mode nil)
                           (ethan-wspace-mode 0)
                           (ethan-wspace-clean-tabs-mode 0)
                           (ethan-wspace-highlight-tabs-mode 0)
                           (setq tab-width 2)))

(setq tags-table-list '("/Users/manuel/code/misc/go-path/" "."))

;; (require 'pos-tip)

(defun orgtbl-to-markdown (table params)
  "Convert the Orgtbl mode TABLE to Markdown."
  (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
                               org-table-last-alignment ""))
         (params2
          (list
           :tstart ""
           :tend ""
           :lstart "|" :lend "|" :sep "| "
           :efmt "%s\\,(%s)" :hline "---")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))

(require 'csharp-mode)

(defun markdown-preview-file ()
  "run Marked on the current file and revert the buffer"
  (interactive)
  (shell-command
   (format "open -a /Applications/Marked.app %s"
           (shell-quote-argument (buffer-file-name))))
  )

(global-set-key "\C-cm" 'markdown-preview-file)

;; glsl mode
(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.vsh\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.fsh\\'" . glsl-mode))

(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)

;; Usage Example:
;;
;; <!-- BEGIN RECEIVE ORGTBL ${1:YOUR_TABLE_NAME} -->
;; <!-- END RECEIVE ORGTBL $1 -->
;;
;; <!--
;; #+ORGTBL: SEND $1 orgtbl-to-gfm
;; | $0 |
;; -->

(defun orgtbl-to-gfm (table params)
  "Convert the Orgtbl mode TABLE to GitHub Flavored Markdown."
  (let* ((alignment (mapconcat (lambda (x) (if x "|--:" "|---"))
                               org-table-last-alignment ""))
         (params2
          (list
           :splice t
           :hline (concat alignment "|")
           :lstart "| " :lend " |" :sep " | ")))
    (concat (orgtbl-to-generic table (org-combine-plists params2 params)) "\n")))

 (defun clear-shell ()
   "Clear a comint window buffer"
   (interactive)
   (let ((comint-buffer-maximum-size 0))
     (comint-truncate-buffer)))

(custom-set-variables
 '(haskell-tags-on-save t))

(add-emacs-dirs "flymake-easy" "flymake-haskell-multi" "emacs-flymake-cursor")
(require 'flymake-easy)
(require 'flymake-haskell-multi)
(add-hook 'haskell-mode-hoook 'flymake-haskell-multi-load)
(add-hook 'haskell-mode-hoook 'flymake-cursor-mode)
(eval-after-load 'flymake '(require 'flymake-cursor))
